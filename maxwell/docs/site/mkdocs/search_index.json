{
    "docs": [
        {
            "location": "/", 
            "text": "Maxwell = Mysql + Kafka\n\n\n\n\n\nThis is Maxwell's daemon, an application that reads MySQL binlogs and writes row updates to Kafka as JSON.\nIt's playing in the same space as \nmypipe\n and \ndatabus\n,\nbut differentiates itself with these features:\n\n\n\n\nWorks with an unpatched mysql\n\n\nParses ALTER/CREATE/DROP table statements, which allows Maxwell to always have a correct view of the mysql schema\n\n\nStores its replication position and needed data within the mysql server itself\n\n\nRequires no external dependencies (save Kafka, if used)\n\n\nEschews the complexity of Avro for plain old JSON.\n\n\nMinimal setup\n\n\n\n\nMaxwell is intended as a source for event-based readers, eg various ETL applications, search indexing,\nstat emitters.\n\n\n\n\n  mysql\n insert into `test`.`maxwell` set id = 1, daemon = 'Stanlislaw Lem';\n  maxwell: {\n    \ndatabase\n: \ntest\n,\n    \ntable\n: \nmaxwell\n,\n    \ntype\n: \ninsert\n,\n    \nts\n: 1449786310,\n    \nxid\n: 940753,\n    \ncommit\n: true,\n    \ndata\n: { \nid\n:1, \ndaemon\n: \nStanlislaw Lem\n }\n  }\n\n\n\n\n  mysql\n update test.maxwell set daemon = 'firebus!  firebus!' where id = 1;\n  maxwell: {\n    \ndatabase\n: \ntest\n,\n    \ntable\n: \nmaxwell\n,\n    \ntype\n: \nupdate\n,\n    \nts\n: 1449786341,\n    \nxid\n: 940786,\n    \ncommit\n: true,\n    \ndata\n: {\nid\n:1, \ndaemon\n: \nFirebus!  Firebus!\n},\n    \nold\n:  {\ndaemon\n: \nStanlislaw Lem\n}\n  }\n\n\n\n\n\n  jQuery(document).ready(function () {\n    jQuery(\"#maxwell-header\").append(\n      jQuery(\"<img alt='The Daemon, maybe' src='./img/cyberiad_1.jpg' id='maxwell-daemon-image'>\")\n    );\n    jQuery(\"pre\").addClass(\"home-code\");\n  });", 
            "title": "Overview"
        }, 
        {
            "location": "/quickstart/", 
            "text": "Row based replication\n\n\n\n\nMaxwell can only operate if row-based replication is on.\n\n\n$ vi my.cnf\n\n[mysqld]\nserver-id=1\nlog-bin=master\nbinlog_format=row\n\n\n\n\nOr on a running server:\n\n\nmysql\n set global binlog_row_image=FULL;\n\n\n\n\nnote\n: When changing the binlog format on a running server, currently connected mysql clients will continue to replication in STATEMENT format --\nin order to change to row-based replication, you must reconnect all active clients to the server.\n\n\nMysql permissions\n\n\n\n\nMaxwell stores all the state it needs within the mysql server itself, in the database called specified by the \nschema_database\n option. By default the database is named \nmaxwell\n.\n\n\nmysql\n GRANT ALL on maxwell.* to 'maxwell'@'%' identified by 'XXXXXX';\nmysql\n GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE on *.* to 'maxwell'@'%';\n\n# or for running maxwell locally:\n\nmysql\n GRANT SELECT, REPLICATION CLIENT, REPLICATION SLAVE on *.* to 'maxwell'@'localhost' identified by 'XXXXXX';\nmysql\n GRANT ALL on maxwell.* to 'maxwell'@'localhost';\n\n\n\n\n\nDownload\n\n\n\n\nYou'll need a version 7 of a JVM.\n\n\ncurl -sLo - https://github.com/zendesk/maxwell/releases/download/v0.17.0/maxwell-0.17.0.tar.gz \\\n       | tar zxvf -\ncd maxwell-0.17.0\n\n\n\n\nSTDOUT producer\n\n\n\n\nUseful for smoke-testing the thing.\n\n\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' --producer=stdout\n\n\n\n\nIf all goes well you'll see maxwell replaying your inserts:\n\n\nmysql\n insert into test.maxwell set id = 5, daemon = 'firebus!  firebus!';\nQuery OK, 1 row affected (0.04 sec)\n\n(maxwell)\n{\ntable\n:\nmaxwell\n,\ntype\n:\ninsert\n,\ndata\n:{\nid\n:5,\ndaemon\n:\nfirebus!  firebus!\n},\nts\n: 123456789}\n\n\n\n\nKafka producer\n\n\n\n\nBoot kafka as described here:  \nhttp://kafka.apache.org/07/quickstart.html\n, then:\n\n\nbin/maxwell --user='maxwell' --password='XXXXXX' --host='127.0.0.1' \\\n   --producer=kafka --kafka.bootstrap.servers=localhost:9092\n\n\n\n\nThis will start writing to the topic \"maxwell\".", 
            "title": "Quick Start"
        }, 
        {
            "location": "/config/", 
            "text": "Command line options\n\n\n\n\n\n\n\n\n\n\noption\n\n\ndescription\n\n\ndefault\n\n\n\n\n\n\n\n\n\n\n--config FILE\n\n\nlocation of \nconfig.properties\n file\n\n\n\n\n\n\n\n\n--log_level\n\n\nlog level [DEBUG\nINFO \nWARN\nERROR\n\n\nINFO\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--host HOST\n\n\nmysql host\n\n\n\n\n\n\n\n\n--user USER\n\n\nmysql username\n\n\n\n\n\n\n\n\n--password PASSWORD\n\n\nmysql password\n\n\n(none)\n\n\n\n\n\n\n--port PORT\n\n\nmysql port\n\n\n3306\n\n\n\n\n\n\n--schema_database\n\n\ndatabase name where maxwell stores schema and state\n\n\nmaxwell\n\n\n\n\n\n\n--max_schemas\n\n\nhow many old schemas maxwell should leave lying around in maxwell.schemas\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--producer PRODUCER\n\n\nwhat type of producer to use: [stdout, kafka, file, profiler]\n\n\nstdout\n\n\n\n\n\n\n--output_file\n\n\nif using the file producer, write JSON rows to this path\n\n\n\n\n\n\n\n\n--kafka.bootstrap.servers\n\n\nlist of kafka brokers, listed as HOST:PORT[,HOST:PORT]\n\n\n\n\n\n\n\n\n--kafka_partition_hash\n\n\nwhich hash function to use: [default, murmur3]\n\n\ndefault\n\n\n\n\n\n\n--kafka_partition_by\n\n\nwhat fields to hash for partition key: [database, table, primary_key]\n\n\ndatabase\n\n\n\n\n\n\n--kafka_topic\n\n\nkafka topic to write to.\n\n\nmaxwell\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--replication_host\n\n\nmysql host to replicate from.  Only specify if different from \nhost\n (see notes)\n\n\nschema-store host\n\n\n\n\n\n\n--replication_password\n\n\npassword on replication server\n\n\n(none)\n\n\n\n\n\n\n--replication_port\n\n\nport on replication server\n\n\n3306\n\n\n\n\n\n\n--replication_user\n\n\nuser on replication server\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--include_dbs PATTERN\n\n\nonly send updates from these databases\n\n\n\n\n\n\n\n\n--exclude_dbs PATTERN\n\n\nignore updates from these databases\n\n\n\n\n\n\n\n\n--include_tables PATTERN\n\n\nonly send updates from tables named like PATTERN\n\n\n\n\n\n\n\n\n--exclude_tables PATTERN\n\n\nignore updates from tables named like PATTERN\n\n\n\n\n\n\n\n\n--blacklist_dbs PATTERN\n\n\nignore updates AND schema changes from databases (see warnings below)\n\n\n\n\n\n\n\n\n--blacklist_tables PATTERN\n\n\nignore updates AND schema changes from tables named like PATTERN (see warnings below)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--bootstrapper\n\n\nbootstrapper type: async\n\n\nsync\n\n\n\n\n\n\n--bootstrapper_fetch_size\n\n\nnumber of rows fetched at a time during bootstrapping.\n\n\n64000\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--init_position FILE:POSITION\n\n\nignore the information in maxwell.positions and start at the given binlog position. Not available in config.properties.\n\n\n\n\n\n\n\n\n--replay\n\n\nenable maxwell's read-only \"replay\" mode.  Not available in config.properties.\n\n\n\n\n\n\n\n\n\n\nProperties file\n\n\n\n\nIf maxwell finds the file \nconfig.properties\n in $PWD it will use it.  Any\ncommand line options (except init_position and replay) may be given as\n\"key=value\" pairs.\n\n\nAdditionally, any configuration file options prefixed with 'kafka.' will be\npassed into the kafka producer library, after having 'kafka.' stripped off the\nfront of the key.  So, for example if config.properties contains\n\n\nkafka.batch.size=16384\n\n\n\n\nthen Maxwell will send \nbatch.size=16384\n to the kafka producer library.\n\n\nFilters\n\n\n\n\nThe options \ninclude_dbs\n, \nexclude_dbs\n, \ninclude_tables\n, and \nexclude_tables\n control whether\nMaxwell will send an update for a given row to its producer.  All the options take a single value PATTERN,\nwhich may either be a literal table/database name, given as \noption=name\n, or a regular expression,\ngiven as \noption=/regex/\n.  The options are evaluated as follows:\n\n\n\n\nonly accept databases in \ninclude_dbs\n if non-empty\n\n\nreject databases in \nexclude_dbs\n\n\nonly accept tables in \ninclude_tables\n if non-empty\n\n\nreject tables in \nexclude_tables\n\n\n\n\nSo an example like \n--include_dbs=/foo.*/ --exclude_tables=bar\n will include \nfooty.zab\n and exclude \nfooty.bar\n\n\nThe option \nblacklist_tables\n and \nblacklist_dbs\n controls whether Maxwell will send updates for a table to its producer AND whether\nit captures schema changes for that table or database. Note that once Maxwell has been running with a table or database marked as blacklisted,\nyou \nmust\n continue to run Maxwell with that table or database blacklisted or else Maxwell will halt. If you want to stop\nblacklisting a table or database, you will have to drop the maxwell schema first.\n\n\nSchema storage host vs replica host\n\n\n\n\nMaxwell needs two sets of mysql permissions to operate properly: a mysql database in which to store schema snapshots,\nand a mysql host to replicate from.  The recommended configuration is that\nthese two functions are provided by a single mysql host.  In this case, just\nspecify \nhost\n, \nuser\n, etc.\n\n\nSome configurations, however, may need to write data to a different server than it replicates from.  In this case,\nthe host described by \nhost\n, \nuser\n, ..., will be used to write schema information to, and Maxwell will replicate\nevents from the host described by \nreplication_host\n, \nreplication_user\n, ...  Note that bootstrapping is not available\nin this configuration.\n\n\n\n  jQuery(document).ready(function () {\n    jQuery(\"table\").addClass(\"table table-condensed table-bordered table-hover\");\n  });", 
            "title": "Configuration"
        }, 
        {
            "location": "/kafka/", 
            "text": "Kafka options\n\n\n\n\nAny options given to Maxwell that are prefixed with \nkafka.\n will be passed directly into the Kafka producer configuration\n(with \nkafka.\n stripped off).  We use the \"new producer\" configuration, as described here:\n\nhttp://kafka.apache.org/documentation.html#newproducerconfigs\n\n\nMaxwell sets the following Kafka options by default, but you can override them in \nconfig.properties\n.\n\n\n\n\nkafka.acks = 1\n\n\nkafka.compression.type = gzip\n\n\n\n\nMaxwell writes to a kafka topic named \"maxwell\" by default.  This can be changed with the \nkafka_topic\n option.\n\n\nKafka key\n\n\n\n\nMaxwell generates keys for its Kafka messages based upon a mysql row's primary key in JSON format:\n\n\n{ \ndatabase\n:\ntest_tb\n,\ntable\n:\ntest_tbl\n,\npk.id\n:4,\npk.part2\n:\nhello\n}\n\n\n\n\nThis key is designed to co-operate with Kafka's log compaction, which will save the last-known\nvalue for a key, allowing Maxwell's Kafka stream to retain the last-known value for a row and act\nas a source of truth.\n\n\nPartitioning\n\n\n\n\nA binlog event's partition is determined by the selected hash function and hash string as follows\n\n\n  HASH_FUNCTION(HASH_STRING) % TOPIC.NUMBER_OF_PARTITIONS\n\n\n\n\nThe HASH_FUNCTION is either java's \nhashCode\n or \nmurmurhash3\n. The default HASH_FUNCTION is \nhashCode\n. Murmurhash3 may be set with the \nkafka_partition_hash\n option. The seed value for the murmurhash function is hardcoded to 25342 in the MaxwellKafkaPartitioner class.\n\n\nThe HASH_STRING may be (\ndatabase\n, \ntable\n, \nprimary_key\n).  The default HASH_STRING is the \ndatabase\n. The partitioning field can be configured using the \nkafka_partition_by\n option.    \n\n\nMaxwell will discover the number of partitions in its kafka topic upon boot.  This means that you should pre-create your kafka topics,\nand with at least as many partitions as you have logical databases:\n\n\nbin/kafka-topics.sh --zookeeper ZK_HOST:2181 --create \\\n                    --topic maxwell --partitions 20 --replication-factor 2\n\n\n\n\nhttp://kafka.apache.org/documentation.html#quickstart\n\n\n\n  jQuery(document).ready(function () {\n    jQuery(\"table\").addClass(\"table table-condensed table-bordered table-hover\");\n  });", 
            "title": "Kafka"
        }, 
        {
            "location": "/dataformat/", 
            "text": "How Maxwell translates different mysql types\n\n\n\nstrings (varchar, text)\n\n\n\n\nMaxwell currently supports latin1 and utf-8 columns, and will convert both to UTF-8 before outputting as JSON.\n\n\nblob (+ binary encoded strings)\n\n\n\n\nMaxell will base64 encode BLOB, BINARY and VARBINARY columns (as well as varchar/string columns with a BINARY encoding).\n\n\ndatetime\n\n\n\n\nDatetime columns are output as \"YYYY-MM-DD hh:mm::ss\" strings.  Note that mysql\nhas no problem storing invalid datetimes like \"0000-00-00 00:00:00\", and\nMaxwell chooses to reproduce these invalid datetimes faithfully,\nfor lack of something better to do.\n\n\nmysql\n    create table test_datetime ( id int(11), dtcol datetime );\nmysql\n    insert into test_datetime set dtcol='0000-00-00 00:00:00';\n\n\nmaxwell  {\ntable\n:\ntest_datetime\n,\ntype\n:\ninsert\n,\ndata\n:{\ndtcol\n:\n0000-00-00 00:00:00\n}}\n\n\n\n\nsets\n\n\n\n\noutput as JSON arrays.\n\n\nmysql\n   create table test_sets ( id int(11), setcol set('a_val', 'b_val', 'c_val') );\nmysql\n   insert into test_sets set setcol = 'b_val,c_val';\n\n\nmaxwell {\ntable\n:\ntest_sets\n,\ntype\n:\ninsert\n,\ndata\n:{\nsetcol\n:[\nb_val\n,\nc_val\n]}}", 
            "title": "Data Format"
        }, 
        {
            "location": "/bootstrapping/", 
            "text": "Maxwell's bootstrapping is available in the \n1.1.0-PRE1 release\n\n\nUsing the maxwell-bootstrap utility\n\n\n\n\nYou can use the \nmaxwell-bootstrap\n utility to bootstrap tables from the command-line.\n\n\n\n\n\n\n\n\noption\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\n--log_level LOG_LEVEL\n\n\nlog level (DEBUG, INFO, WARN or ERROR)\n\n\n\n\n\n\n--user USER\n\n\nmysql username\n\n\n\n\n\n\n--password PASSWORD\n\n\nmysql password\n\n\n\n\n\n\n--host HOST\n\n\nmysql host\n\n\n\n\n\n\n--port PORT\n\n\nmysql port\n\n\n\n\n\n\n--database DATABASE\n\n\nmysql database containing the table to bootstrap\n\n\n\n\n\n\n--table TABLE\n\n\nmysql table to bootstrap\n\n\n\n\n\n\n\n\nUsing the maxwell.bootstrap table\n\n\n\n\nAlternatively you can insert a row in the \nmaxwell.bootstrap\n table to trigger a bootstrap.\n\n\nmysql\n insert into maxwell.bootstrap (database_name, table_name) values ('fooDB', 'barTable');\n\n\n\n\nAsync vs Sync bootstrapping\n\n\n\n\nThe Maxwell replicator is single threaded; events are captured by one thread from the binlog and replicated to Kafka one message at a time.\nWhen running Maxwell with \n--bootstrapper=sync\n, the same thread is used to do bootstrapping, meaning that all binlog events are blocked until bootstrapping is complete.\nRunning Maxwell with \n--bootstrapper=async\n however, will make Maxwell spawn a separate thread for bootstrapping.\nIn this async mode, non-bootstrapped tables are replicated as normal by the main thread, while the binlog events for bootstrapped tables are queued and sent to the replication stream at the end of the bootstrap process.\n\n\nBootstrapping Data Format\n\n\n\n\n\n\na bootstrap starts with a document with \ntype = \"bootstrap-start\"\n\n\nthen documents with \ntype = \"insert\"\n (one per row in the table)\n\n\nthen one document per \nINSERT\n, \nUPDATE\n or \nDELETE\n that occurred since the beginning of bootstrap\n\n\nfinally a document with \ntype = \"bootstrap-complete\"\n\n\n\n\nHere's a complete example:\n\n\nmysql\n create table fooDB.barTable(txt varchar(255));\nmysql\n insert into fooDB.barTable (txt) values (\nhello\n), (\nbootstrap!\n);\nmysql\n insert into maxwell.bootstrap (database_name, table_name) values (\nfooDB\n, \nbarTable\n);\n\n\n\n\nCorresponding replication stream output of table \nfooDB.barTable\n:\n\n\n{\ndatabase\n:\nfooDB\n,\ntable\n:\nbarTable\n,\ntype\n:\ninsert\n,\nts\n:1450557598,\nxid\n:13,\ndata\n:{\ntxt\n:\nhello\n}}\n{\ndatabase\n:\nfooDB\n,\ntable\n:\nbarTable\n,\ntype\n:\ninsert\n,\nts\n:1450557598,\nxid\n:13,\ndata\n:{\ntxt\n:\nbootstrap!\n}}\n{\ndatabase\n:\nfooDB\n,\ntable\n:\nbarTable\n,\ntype\n:\nbootstrap-start\n,\nts\n:1450557744,\ndata\n:{}}\n{\ndatabase\n:\nfooDB\n,\ntable\n:\nbarTable\n,\ntype\n:\nbootstrap-insert\n,\nts\n:1450557744,\ndata\n:{\ntxt\n:\nhello\n}}\n{\ndatabase\n:\nfooDB\n,\ntable\n:\nbarTable\n,\ntype\n:\nbootstrap-insert\n,\nts\n:1450557744,\ndata\n:{\ntxt\n:\nbootstrap!\n}}\n{\ndatabase\n:\nfooDB\n,\ntable\n:\nbarTable\n,\ntype\n:\nbootstrap-complete\n,\nts\n:1450557744,\ndata\n:{}}\n\n\n\n\n\n  jQuery(document).ready(function () {\n    jQuery(\"table\").addClass(\"table table-condensed table-bordered table-hover\");\n  });", 
            "title": "Bootstrapping"
        }, 
        {
            "location": "/compat/", 
            "text": "Requirements:\n\n\n\n\n\n\nJRE 7 or above\n\n\nmysql 5.1, 5.5, 5.6\n\n\nkafka 0.8.2 or greater\n\n\n\n\nUnsupported configurations\n\n\n\n\n\n\nMysql 5.7 is untested with Maxwell.  GTID replication is known to not function.\n\n\nMaxwell is incompatible with PARTITION tables, as it is unable to parse the SQL.\n\n\n\n\nbinlog_row_image=MINIMAL\n\n\n\n\nAs of 0.16.2, Maxwell supports binlog_row_image=MINIMAL, but it may not be what you want.  It will differ\nfrom normal Maxwell operation in that:\n\n\n\n\nINSERT statements will no longer output a column's default value\n\n\nUPDATE statements will be incomplete; Maxwell outputs as much of the row as given in the binlogs,\n  but \ndata\n will only include what is needed to perform the update (generally, id columns and changed columns).\n  The \nold\n section may or may not be included, depending on the nature of the update.\n\n\nDELETE statements will be incomplete; generally they will only include the primary key.\n\n\n\n\nMaster recovery\n\n\n\n\nCurrently Maxwell is not very smart about master recovery or detecting a promoted slave; if it determines\nthat the server_id has changed between runs, Maxwell will simply delete its old schema cache and binlog position\nand start again.  We plan on improving master recovery in future releases.\n\n\nIf you know the starting position of your new master, you can start the new Maxwell process with the\n\n--init_position\n flag, which will ensure that no gap appears in a master failover.", 
            "title": "Compat / Caveats"
        }
    ]
}