#!/usr/bin/env ruby

require 'bundler/setup'
require 'octokit'

REPO="zendesk/maxwell"

BINDIR=File.dirname(__FILE__)

CURRENT_REV=`#{BINDIR}/current_rev`

if !( ($version = ARGV[0]) && $version =~ /\d+\.\d+\.\d+/)
  message =  "usage: #{$0} VERSION\n"
  message += "  (current version is #{CURRENT_REV})"
  abort(message)
end

puts "Releasing version: #{$version}"

if ( $command = ARGV[1] )
  unless ["bump", "build", "tag", "release"].include?($command)
    abort("unknown subcommand: #{$command}")
  end
end

def do_system(cmd, *args)
  system(cmd, *args)
  abort "command #{cmd} #{args.join(' ')} failed" unless $?.success?
end

def bump
  do_system(BINDIR + "/bump", $version)
end

def build
  do_system("mvn clean package")

  commit_template = Tempfile.new('maxwell_build')
  commit_template.write <<-EOL
  v#{$version}, "pithy title here"
  - list changes

  EOL

  git_log = "git log --pretty=format:'%h -%d %s %cr <%an>' --abbrev-commit --date=relative v#{CURRENT_REV}..HEAD"

  commit_template.write(`#{git_log}`.gsub(/^/, '# '))
  commit_template.close

  do_system("git commit -av -t #{commit_template.path}")
  do_system("git push")
end

def tag
  do_system("git tag v#{$version}")
  do_system("git push --tags")
end

def release
  release_title = `git show -s HEAD --format='%s'`
  release_body = `git show -s HEAD --format='%b'`

  puts "title: #{release_title}"
  puts "body: #{release_body}"

  client = Octokit::Client.new(netrc: true)

  release = client.create_release(REPO, 'v' + $version, name: release_title, body: release_body)
  client.upload_asset(release.url, BINDIR + "/../target/maxwell-#{$version}.tar.gz")
  do_system(BINDIR + "/../docs/push")
end

if $command
  send($command)
else
  bump
  build
  tag
  release
end

